USE sakila;

-- 1. List the number of films per category.

SELECT c.name, COUNT(f.film_id) as number_of_films
FROM sakila.film as f
JOIN sakila.film_category as fc
ON f.film_id = fc.film_id
JOIN sakila.category as c
ON fc.category_id = c.category_id
GROUP BY c.name;

-- 2. Retrieve the store ID, city, and country for each store.

SELECT s.store_id, ci.city, co.country
FROM sakila.store as s
JOIN sakila.address as a
ON s.address_id = a.address_id
JOIN sakila.city as ci
ON a.city_id = ci.city_id
JOIN sakila.country as co
ON ci.country_id = co.country_id;

-- 3. Calculate the total revenue generated by each store in dollars.

SELECT s.store_id, CONCAT('$', SUM(p.amount)) as revenue_in_dollars
FROM sakila.store as s
JOIN sakila.customer as c
ON s.store_id = c.store_id
JOIN sakila.payment as p
ON c.customer_id = p.customer_id
GROUP BY s.store_id;

-- 4. Determine the average running time of films for each category.

SELECT c.name, round(AVG(f.length), 2) as average_length
FROM sakila.film as f
JOIN sakila.film_category as fc
ON f.film_id = fc.film_id
JOIN sakila.category as c
ON fc.category_id = c.category_id
GROUP BY c.name;


-- 5. Identify the film categories with the longest average running time.

SELECT c.name, round(AVG(f.length),2) as average_length
FROM sakila.film as f
JOIN sakila.film_category as fc
ON f.film_id = fc.film_id
JOIN sakila.category as c
ON fc.category_id = c.category_id
GROUP BY c.name
ORDER BY average_length DESC;

-- 6. Display the top 10 most frequently rented movies in descending order.

SELECT f.title, COUNT(r.rental_id) as number_of_times_rented
FROM sakila.film as f
JOIN sakila.inventory as i
ON f.film_id = i.film_id
JOIN sakila.rental as r
ON i.inventory_id = r.inventory_id
GROUP BY f.title
ORDER BY number_of_times_rented DESC
LIMIT 10;

-- 7. Determine if "Academy Dinosaur" can be rented from Store 1.

SELECT f.title, r.inventory_id, r.rental_id, i.store_id
FROM sakila.film as f
JOIN sakila.inventory as i
ON f.film_id = i.film_id
JOIN sakila.rental as r
ON i.inventory_id = r.inventory_id
HAVING (f.title = 'ACADEMY DINOSAUR') AND (i.store_id = 1);

-- This code is not very clean, but I'm unsure how else to approach it

SELECT EXISTS (
	SELECT 1
	FROM sakila.film as f
	JOIN sakila.inventory as i
	ON f.film_id = i.film_id
	JOIN sakila.rental as r
	ON i.inventory_id = r.inventory_id
	WHERE (f.title = 'ACADEMY DINOSAUR') AND (i.store_id = 1))
AS is_available


